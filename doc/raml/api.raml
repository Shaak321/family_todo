#%RAML 1.0
title: family_todo
version: v1
baseUri: http://api.samplehost.com

/login:
  post:
    description: Sends user's username and password for authentication
    body:
      application/json:
        example: |
          {
            "username": "JohnDoe01",
            "password": "12345abc"
          }
    responses:
      200:
        description: Login was successful
        body:
          application/xml:
            example: |
              {
                "sessionId": "QWEQWEASD1234DFDFG"
              }
      404:
        description: Username or password is wrong, no such user.
/logout:
  post:
    description: Sends user's session id in order to log him/her out
    body:
      application/json:
        example: |
          {
            "sessionId": "SADFGFDVXCCXV1234GERT%"
          }
    responses:
      200:
        description: Log out was successful.
      404:
        description: The given session id did not exists.
/register:
  post:
    description: Sends registration information in order to register to the website
    body:
      application/xml:
        example: |
          {
            "username": "JohnDoe01",
            "password": "12345abc",
            "name": "John Doe",
            "phoneNumber": 012345,
            "home": "Somewhere",
            "workplace": "Somewhere else
            "birth": 1970.05.22
          }
    responses:
      200:
        description: Registration was successful
      409:
        description: Username already taken
      412:
        description: validation of given data was erronous
        body:
          application/json:
            example: |
              {
                "erronousField":"username"
              }
/users:
  get:
    description: |
                  gets all user's basic info in case of that the user that is requesting
                  is the global administrator
    headers:
      Authorization:
        description: Payload for HTTP basic authentication
        required: true
        example:  Basic QWER!+%%/=
    responses:
      200:
        body:
          application/xml:
            example: |
              {
                "users":
                  [
                    {
                      "id": 1,
                      "username": "JohnDoe01",
                      "name": "John Doe"
                    },
                    {
                      "id": 2,
                      "username": "MaryPoppins",
                      "name": "Mary Poppins"
                    }
                  ]
              }
  /{userId}:
    get:
      description: |
                    gets the specified user's all information if
                      * The requester is the global administrator
                      * The requester and the holder of the userId are part of the same family
                      * The requester has the same userId as the specified.
      headers:
        Authorization:
          description: Payload for HTTP basic authentication
          required: true
          example:  Basic QWER!+%%/=
      responses:
        200:
          body:
            application/xml:
              example: |
                {
                "id": 1,
                "username": "JohnDoe01",
                "name": "John Doe",
                "phoneNumber": 012345,
                "home": "Somewhere",
                "workplace": "Somewhere else",
                "role": "father",
                "birth": 1970.05.22,
                "families": [1,2,4]
                }
        404:
          description: No such user or no permission for display
    patch:
      description: |
                    Modifies the given user's information if and only if
                      * The requester has the same userId as the specified
                      * The requester is the global administrator
      headers:
        Authorization:
          description: Payload for HTTP basic authentication
          required: true
          example:  Basic QWER!+%%/=
      body:
        application/json:
          description: The modified information to be persisted in the database.
          example: |
            {
              "id": 1,
              "username": "JohnDoe01",
              "password": "12345abc",
              "name": "John Doe",
              "phoneNumber": 012345,
              "home": "Somewhere",
              "workplace": "Somewhere else",
              "role": "father",
              "birth": 1970.05.22
            }
      responses:
        200:
          description: Modification was successful
        404:
          description: No such user or no permission for display
    delete:
      description: |
                    Deletes the given user if and only if
                      * The requester is the same as the holder of the specified userID
                      * The requester is the global administrator
      headers:
        Authorization:
          description: Payload for HTTP basic authentication
          required: true
          example:  Basic QWER!+%%/=
      responses:
        200:
          description: Deletion was successful.
        404:
          description: No such user or no permission.
    /joinFamily:
      post:
            description: |
                          join to the given family with the specified familyId
                          if and only if
                            * The requester has the same userId as the specified.
            headers:
              Authorization:
                description: Payload for HTTP basic authentication
                required: true
                example:  Basic QWER!+%%/=
            body:
                application/json:
                  example: |
                    {
                      "familyId": "WDWQER"+!%%"
                    }
            responses:
              200:
                description: Join was successful
              404:
                description: No such family
    /todos:
      get:
        description: |
                      Get all the TODO's associated with the specified user if and only if
                        * The requester has the same userId as the specified
                        * The requester is in the same family as the holder of the specified userId
                        * The requester is the global administrator

        headers:
          Authorization:
            description: Payload for HTTP basic authentication
            required: true
            example:  Basic QWER!+%%/=
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                  "todos":[
                    {
                      "start": "2010-05-02",
                      "end": "2010-05-03",
                      "name":"My Little todo",
                      "description": "My litte todo description",
                      "location": "Home"
                    },
                    {
                    "start": "2010-05-04",
                    "end": "2010-05-06",
                    "name":"My Little todo2",
                    "description": "My litte todo2 description",
                    "location": "Work"
                    }
                  ]
                  }
          404:
            description: no such user or no permission for display
/families:
      get:
        description: |
                      Get all families for the specified
                      that the requester is member of.If the requester is the global
                      administrator then it returns all the families.

        headers:
          Authorization:
            description: Payload for HTTP basic authentication
            required: true
            example:  Basic QWER!+%%/=
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "families":[12,35,43,1]
                  }
          401:
            description: Unauthorized
      post:
        description: Creates a new family.
        headers:
          Authorization:
            description: Payload for HTTP basic authentication
            required: true
            example:  Basic QWER!+%%/=
        body:
          application/json:
            example: |
              {
                "familyName": "Doe's family",
                "adminId": 3
              }
        responses:
          200:
            description: Creation was successful.
          401:
            description: Unauthorized
          412:
            description: validation of given data was erronous
            body:
             application/json:
              example: |
                {
                  "erronousField":"familyName"
                }
      /{familyId}:
        get:
          description: |
                        Get all information from the specified family if and only if
                          * The requester is part of the family
                          * The requester is the global administrator
          headers:
            Authorization:
              description: Payload for HTTP basic authentication
              required: true
              example:  Basic QWER!+%%/=
          responses:
            200:
              body:
                application/json:
                  example: |
                    {
                      "id": 3,
                      "name": "Doe's family",
                      "adminId": 1
                    }
            401:
              description: Unauthorized
        patch:
          description: |
                        Modifies the family that
                          * The requester owns as an administrator
                          * The requester owns as global administrator.
          headers:
            Authorization:
              description: Payload for HTTP basic authentication
              required: true
              example:  Basic QWER!+%%/=
          body:
            application/json:
              example: |
                {
                  "familyName": "OtherDoe's family"
                }
          responses:
            200:
              description: Modification was successful
            404:
              description: no such family or no permission for display
            412:
              description: validation of given data was erronous
              body:
               application/json:
                example: |
                  {
                    "erronousField":"familyName"
                  }
        delete:
          description: |
                        Deletes the family that
                          * The requester owns as an administrator
                          * The requester owns as global administrator.
          headers:
            Authorization:
              description: Payload for HTTP basic authentication
              required: true
              example:  Basic QWER!+%%/=
          responses:
            200:
              description: Deletion was successful
            404:
              description: no such family or no permission for display
        /deleteMember:
          /{userId}:
            delete:
              description: |
                            Deletes the specified user from the specified family
                            if and only if:
                              * The requester owns the family
                              * The requester is the global administrator
                              * The requester has the same userId as the specified one.
              headers:
                Authorization:
                  description: Payload for HTTP basic authentication
                  required: true
                  example:  Basic QWER!+%%/=
              responses:
                200:
                  description: Deletion was successful.
                404:
                  description: No such family or user of the family or no permission for display
/todos:
  get:
    description: |
                  List all the todo's in the system if and only if
                  the requester is the global administrator.
    headers:
      Authorization:
        description: Payload for HTTP basic authentication
        required: true
        example:  Basic QWER!+%%/=
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "todos":[
                  {
                    "id": 2,
                    "start": "2010-05-02",
                    "end": "2010-05-03",
                    "name":"My Little todo",
                    "description": "My litte todo description",
                    "location": "Home",
                    "isCompleted": true
                  },
                  {
                  "id": 3,
                  "start": "2010-05-04",
                  "end": "2010-05-06",
                  "name":"My Little todo2",
                  "description": "My litte todo2 description",
                  "location": "Work",
                  "isCompleted": false
                  }
                ]
              }
      401:
        description: Unauthorized
  post:
    description: Create a TODO for the specified user, specified in the sessionId
    headers:
      Authorization:
        description: Payload for HTTP basic authentication
        required: true
        example:  Basic QWER!+%%/=
    body:
      application/json:
        example: |
          {
            "start": "2010-05-02",
            "end": "2010-05-03",
            "name":"My Little todo",
            "description": "My litte todo description",
            "location": "Home",
            "isCompleted": false
          }
    responses:
      200:
        description: TODO was succesfully added.
      401:
        description: Unauthorized.
      409:
        description: User has already a TODO with the same activity name.
      412:
        description: validation of given data was erronous
        body:
          application/json:
            example: |
              {
                "erronousField":"start"
              }
  /{todoId}:
    get:
      description: |
                    Get all information from the specified TODO if and only if
                      * The requester is the owner of the TODO
                      * The requester is global administrator
                      * The requester is in the same family the owner of the specified TODO.
      headers:
        Authorization:
          description: Payload for HTTP basic authentication
          required: true
          example:  Basic QWER!+%%/=
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": 2,
                  "start": "2010-05-02",
                  "end": "2010-05-03",
                  "name":"My Little todo",
                  "description": "My litte todo description",
                  "location": "Home",
                  "isCompleted": true
                }
        404:
          description: No such TODO or no permission for display.
    patch:
      description: |
                    Modifies the given TODO if and only if
                    * The requester is the owner of the specified TODO
                    * The requester is the global administrator.
      headers:
        Authorization:
          description: Payload for HTTP basic authentication
          required: true
          example:  Basic QWER!+%%/=
      body:
        application/json:
          example: |
            {
            "start": "2010-05-02",
            "end": "2010-05-03",
            "name":"My Little todo changed",
            "description": "My litte todo changed description",
            "location": "Not Home",
            "isCompleted": true
            }
      responses:
        200:
          description: Modification was successful.
        404:
          description: No such TODO or no permission for display.
        409:
          description: User has already a TODO with the same activity name.
        412:
          description: validation of given data was erronous
          body:
            application/json:
              example: |
                {
                  "erronousField":"start"
                }
    delete:
      description: |
                    Deletes the given TODO if and only if
                    * The requester is the owner of the specified TODO
                    * The requester is the global administrator.
      headers:
        Authorization:
          description: Payload for HTTP basic authentication
          required: true
          example:  Basic QWER!+%%/=
      responses:
        200:
          description: Deletion was successful.
        404:
          description: No such TODO or no permission for display.
    /complete:
      patch:
        description: |
                      Changes the status of the specified TODO to completed
                      if and only if:
                        * The requester owns the TODO.
                        * The requester is the global administrator.
        responses:
          200:
            description: Change was successful
          404:
            description: No such TODO or no permission for display
